diff --git a/Makefile b/Makefile
index deabf98..86afdc4 100644
--- a/Makefile
+++ b/Makefile
@@ -144,7 +144,7 @@ $(TYPHA_IMAGE): bin/calico-typha-$(ARCH) register
 	mkdir -p docker-image/bin
 	cp bin/calico-typha-$(ARCH) docker-image/bin/
 	cp LICENSE docker-image/
-	docker build --pull -t $(TYPHA_IMAGE):latest-$(ARCH) --build-arg QEMU_IMAGE=$(CALICO_BUILD) --build-arg GIT_VERSION=$(GIT_VERSION) --file ./docker-image/Dockerfile.$(ARCH) docker-image
+	docker build -t $(TYPHA_IMAGE):latest-$(ARCH) --build-arg QEMU_IMAGE=$(CALICO_BUILD) --build-arg GIT_VERSION=$(GIT_VERSION) --file ./docker-image/Dockerfile.$(ARCH) docker-image
 ifeq ($(ARCH),amd64)
 	docker tag $(TYPHA_IMAGE):latest-$(ARCH) $(TYPHA_IMAGE):latest
 endif
diff --git a/docker-image/Dockerfile.s390x b/docker-image/Dockerfile.s390x
index c6824aa..910795d 100644
--- a/docker-image/Dockerfile.s390x
+++ b/docker-image/Dockerfile.s390x
@@ -12,32 +12,41 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-ARG QEMU_IMAGE=calico/go-build:latest
-FROM ${QEMU_IMAGE} as qemu
+ARG GIT_VERSION=unknown
 
-FROM s390x/debian:9.8-slim as base
-MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)
+FROM registry.access.redhat.com/ubi8/ubi-minimal:latest as base
 
-# Enable non-native builds of this image on an amd64 hosts.
-# This must before any RUN command in this image!
-# we only need this for the intermediate "base" image, so we can run all the apt-get and other commands
-# and this is only because of using older kernels
-# when running on a kernel >= 4.8, this will become less relevant
-COPY --from=qemu /usr/bin/qemu-s390x-static /usr/bin/
+MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)
 
 # Since our binary isn't designed to run as PID 1, run it via the tini init daemon.
 ENV TINI_VERSION v0.18.0
 ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-s390x /sbin/tini
 RUN chmod +x /sbin/tini
 
+
+# Add in top-level license file
+RUN mkdir /licenses
+ADD licenses /licenses
+COPY LICENSE /licenses
+
 FROM scratch
+ARG GIT_VERSION
+
 COPY --from=base /sbin/tini /sbin/tini
+COPY --from=base /licenses /licenses
+
+COPY --from=base /usr/include /usr/include
+COPY --from=base /lib64 /lib64
+COPY --from=base /lib /lib
 
 # Put our binary in /code rather than directly in /usr/bin.  This allows the downstream builds
 # to more easily extract the build artefacts from the container.
 ADD bin/calico-typha-s390x /code/calico-typha
 ADD typha.cfg /etc/calico/typha.cfg
 
+# Add nsswitch.conf so that we correctly resolve localhost based on /etc/hosts.
+ADD nsswitch.conf /etc/nsswitch.conf
+
 WORKDIR /code
 ENV PATH "$PATH:/code"
 
