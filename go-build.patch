diff --git a/Dockerfile.s390x b/Dockerfile.s390x
index 541064b..d9ad818 100644
--- a/Dockerfile.s390x
+++ b/Dockerfile.s390x
@@ -1,23 +1,11 @@
-FROM alpine:3.11 as qemu
+FROM calico/bpftool:v5.3-s390x as bpftool
 
-ARG QEMU_VERSION=4.2.0-6
-ARG QEMU_ARCHS="s390x"
-
-RUN apk --update add curl
-
-# Enable non-native runs on amd64 architecture hosts
-RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
-RUN chmod +x /usr/bin/qemu-*
-
-FROM s390x/golang:1.16.7-alpine3.14
+FROM s390x/golang:1.16.7-buster
 MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)
 
 ARG MANIFEST_TOOL_VERSION=v1.0.2
 
-# Enable non-native builds of this image on an amd64 hosts.
-# This must be the first RUN command in this file!
-COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/
-
+ARG GO111MODULE=auto
 # Install su-exec for use in the entrypoint.sh (so processes run as the right user)
 # Install bash for the entry script (and because it's generally useful)
 # Install curl
@@ -29,48 +17,101 @@ COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/
 # Install util-linux for column command (used for output formatting).
 # Install grep, sed, zip, and jq for use in some Makefiles
 # Install shadow for useradd (it allows to use big UID)
-RUN apk update && apk add --no-cache su-exec curl bash git openssh mercurial make wget util-linux tini file grep sed jq zip shadow libpcap-dev
-RUN apk upgrade --no-cache
-
-# Disable ssh host key checking
-RUN echo 'Host *' >> /etc/ssh/ssh_config \
-  && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config
+# Install gcc for cgo.
+# Install clang, libbpf and newer kernel headers for building BPF binaries.
+RUN echo 'APT::Default-Release "buster";' > /etc/apt/apt.conf.d/99defaultrelease && \
+    echo 'deb     http://ftp.am.debian.org/debian/    buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list && \
+    apt-get -y update &&  \
+    apt-get -y upgrade && \
+    apt-get install --no-install-recommends -y -t buster-backports \
+        libbpf-dev linux-headers-5.10.0-0.bpo.9-s390x && \
+    apt-get install --no-install-recommends -y \
+        curl bash git openssh-client mercurial make wget util-linux file grep sed jq zip \
+        llvm-11 clang-11 binutils file iproute2 \
+        ca-certificates gcc mingw-w64 libc-dev bsdmainutils strace libpcap-dev && \
+    rm -rf /var/lib/apt/lists/*
+
+# su-exec is used by the entrypoint script to execute the user's command with the right UID/GID.
+# (sudo doesn't work easily in a container.)  The version was current master at the time of writing.
+ARG SU_EXEC_VER=212b75144bbc06722fbd7661f651390dc47a43d1
+RUN  set -ex; \
+     curl -o /sbin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/${SU_EXEC_VER}/su-exec.c; \
+     gcc -Wall /sbin/su-exec.c -o/sbin/su-exec; \
+     chown root:root /sbin/su-exec; \
+     chmod 0755 /sbin/su-exec; \
+     rm /sbin/su-exec.c
+
+# Install fossa for foss license checks
+ARG FOSSA_VER=1.0.1
+RUN git clone -b v1.0.1 https://github.com/fossas/fossa-cli.git $GOPATH/src/github.com/fossas/fossa-cli; \
+    cd $GOPATH/src/github.com/fossas/fossa-cli; \
+    make; \
+    cp $GOPATH/bin/fossa /usr/local/bin; \
+    chmod +x /usr/local/bin/fossa
+#RUN curl -L https://github.com/fossas/fossa-cli/releases/download/v${FOSSA_VER}/fossa-cli_${FOSSA_VER}_linux_s390x.tar.gz | tar zxvf - -C /usr/local/bin --extract fossa
+#RUN chmod +x /usr/local/bin/fossa
+
+ARG MOCKERY_VER=2.3.0
+RUN git clone -b v2.3.0 https://github.com/vektra/mockery.git $GOPATH/src/github.com/vektra/mockery.git; \
+    cd $GOPATH/src/github.com/vektra/mockery.git; \
+    go get github.com/vektra/mockery/v2/.../; \
+    cp $GOPATH/bin/mockery /usr/local/bin/mockery; \
+    chmod +x /usr/local/bin/mockery
+#RUN curl -L https://github.com/vektra/mockery/releases/download/v${MOCKERY_VER}/mockery_${MOCKERY_VER}_Linux_x86_64.tar.gz | tar zxvf - -C /usr/local/bin --extract mockery
+#RUN chmod +x /usr/local/bin/mockery
+
+ # Disable ssh host key checking
+ RUN echo 'Host *' >> /etc/ssh/ssh_config \
+   && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config
+
+# We want to be able to do both cgo and non-cgo builds.  That's awkward because toggling cgo
+# results in parts of the stdlib getting rebuilt (which fails due to the container's read-only
+# filesystem).  As a workaround: take a copy of the go root for cgo builds and have the
+# entrypoint script swap it into the path if it detects CGO_ENABLED=1.
+ENV GOROOT=/usr/local/go
+ENV GOCGO=/usr/local/go-cgo
 
 # Disable cgo so that binaries we build will be fully static.
 ENV CGO_ENABLED=0
 
-# Recompile the standard library with cgo disabled.  This prevents the standard library from being
-# marked stale, causing full rebuilds every time.
-RUN go install -v std
-
-# Install ginkgo CLI tool for running tests
-RUN go get github.com/onsi/ginkgo/ginkgo
-
-# Install linting tools.
-RUN wget -O - -q https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.20.0
-RUN golangci-lint --version
-
-# Install license checking tool.
-RUN go get github.com/pmezard/licenses
-
-# Install tool to merge coverage reports.
-RUN go get github.com/wadey/gocovmerge
-
-# Install CLI tool for working with yaml files
-RUN GO111MODULE=on go get github.com/mikefarah/yq/v3
-
-# Delete all the Go sources that were downloaded, we only rely on the binaries
-RUN rm -rf /go/src/*
+RUN cp -a $GOROOT $GOCGO && \
+  go install -v std && \
+  rm -rf /go/src/* /root/.cache
+
+# Install go programs that we rely on
+RUN go get github.com/onsi/ginkgo/ginkgo && \
+  go get golang.org/x/tools/cmd/goimports && \
+  wget -O - -q https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.27.0 && \
+  golangci-lint --version && \
+  go get github.com/pmezard/licenses && \
+  go get github.com/wadey/gocovmerge && \
+  GO111MODULE=on go get github.com/mikefarah/yq/v3 && \
+  go get -u github.com/jstemmer/go-junit-report && \
+  go get -u golang.org/x/tools/cmd/stringer && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/openapi-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/deepcopy-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/client-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/lister-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/informer-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/defaulter-gen@v0.21.0 && \
+  GO111MODULE=on go get k8s.io/code-generator/cmd/conversion-gen@v0.21.0 && \
+  rm -rf /go/src/* /root/.cache
 
 # Install generation tools.
-RUN  go get -u k8s.io/code-generator/cmd/openapi-gen
-RUN  go get -u k8s.io/code-generator/cmd/deepcopy-gen
+#RUN  go get -u k8s.io/code-generator/cmd/openapi-gen
+#RUN  go get -u k8s.io/code-generator/cmd/deepcopy-gen
 
 # Install necessary Kubernetes binaries used in tests.
 RUN wget https://dl.k8s.io/v1.22.2/bin/linux/s390x/kube-apiserver -O /usr/local/bin/kube-apiserver && chmod +x /usr/local/bin/kube-apiserver && \
 	wget https://dl.k8s.io/release/v1.22.2/bin/linux/s390x/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
 	wget https://dl.k8s.io/v1.22.2/bin/linux/s390x/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager
 
+# Used for generating CRD files.
+# Download a version of controller-gen that has been hacked to support additional types (e.g., float).
+# We can remove this once we update the Calico v3 APIs to use only types which are supported by the upstream controller-gen
+# tooling. Example: float, all the types in the numorstring package, etc.
+RUN wget -O ${GOPATH}/bin/controller-gen https://github.com/projectcalico/controller-tools/releases/download/calico-0.1/controller-gen && chmod +x ${GOPATH}/bin/controller-gen
+
 # Ensure that everything under the GOPATH is writable by everyone
 RUN chmod -R 777 $GOPATH
 
@@ -78,5 +119,14 @@ RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFE
     chmod +x manifest-tool && \
     mv manifest-tool /usr/bin/
 
+# crane is needed for our release targets to copy images from the dev registries to the release registries.
+RUN wget https://github.com/google/go-containerregistry/releases/download/v0.7.0/go-containerregistry_Linux_s390x.tar.gz && \
+    tar -xvf go-containerregistry_Linux_s390x.tar.gz && \
+    chmod +x crane && \
+    mv crane /usr/bin
+
+# Add bpftool for Felix UT/FV.
+COPY --from=bpftool /bpftool /usr/bin
+
 COPY entrypoint.sh /usr/local/bin/entrypoint.sh
-ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/entrypoint.sh"]
+ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
diff --git a/Makefile b/Makefile
index cdb9d89..df65083 100644
--- a/Makefile
+++ b/Makefile
@@ -74,7 +74,7 @@ image: calico/go-build
 calico/go-build: register
 	# Make sure we re-pull the base image to pick up security fixes.
 	# Limit the build to use only one CPU, This helps to work around qemu bugs such as https://bugs.launchpad.net/qemu/+bug/1098729
-	docker build $(DOCKER_BUILD_ARGS) --pull -t $(ARCHIMAGE) -f $(DOCKERFILE) .
+	docker build $(DOCKER_BUILD_ARGS) -t $(ARCHIMAGE) -f $(DOCKERFILE) .
 
 image-all: $(addprefix sub-image-,$(ARCHES))
 sub-image-%:
